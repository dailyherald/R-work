{
    "contents" : "\n\n#####################################################################################################\n#\n#                                       ____________________________\n#                                      !\\_________________________/!\\\n#                                      !!                         !! \\\n#                                      !!C:\\> GETTING STARTED     !!  \\\n#                                      !!         WITH R          !!  !\n#                                      !!           ie            !!  !\n#                                      !!     HOW TO OVERCOME     !!  !\n#                                      !!        YOUR FEAR        !!  !\n#                                      !!            &            !!  !\n#                                      !!     LEARN TO LOVE R     !!  /\n#                                      !!_________________________!! /\n#                                      !/_________________________\\!/\n#                                       __\\_________________/__/!_  )\n#                                       !_______________________!/   )\n#                                       |________________________|  (__\n#                                       /oooo  oooo  oooo  oooo /!   _  )_\n#                                     /ooooooooooooooooooooooo/ /  (_)_(_)\n#                                    /ooooooooooooooooooooooo/ /    (o o)\n#                                   /o=_____________________/_/    ==\\o/==\n\n\n\n############# SECTION 1. WELCOME TO R STUDIO #############\n\n##### Understanding What You See #####\n\n#The easiest way to get started in R studio is to understand the four pane set up you see in front of you. \n\n#Upper left: The Source, where you will find the script you are working on (or reading) and your data\n#tables (known as data frames).\n\n#Upper right: 1) Environment, which is your workspace showing all the data you have loaded up, and \n#2) History, which shows what commands you have run. Very important to note that you can and should \n#save your environment and your history from time to time in case R gets overwhelmed and decides \n#to shut down. Or at least save a script so you can recreate your environment.\n\n#Lower left: Console, which is your active command line.\n\n#Lower right: 1) Files (which files are in your working directory), 2) Plots (any graphics you make), \n# 3) Packages (your installed and activated packages), 4) Viewer (to look at web content)\n# and 5) Help (your best friend). \n\n##### How to get help (more resources at the end) ######\n\n#There are two functions you can use to get help (the responses will show up in lower right). \n#We are using the function mean in order to show how (to run commands from script select command + return):\n\n?mean\n# or\nhelp(mean)\n\n### How to run code (two ways):\n\n#Select the text and then hit the RUN button.\nx = c(1,2,3,4,5)\n\n#Put your cursor on the row and then hit COMMAND + RETURN\nmean(x)\n\n############# SECTION 2. UNDERSTANDING THE BASIC ELEMENTS OF R #############\n\n##### Understanding the data elements #####\n\n#R has multiple named data structures and elements:\n\n#### Object: most basic element, includes variables, data, functions you make, results, etc, \n# are kept in the active memory of your computer as objects -- you can find them in \n# your workspace (\"Environment\")\n\n# What does an object look like?\n# In R, everything is an object. So whatever you assign to a vector, a data frame, a function, those\n# are all objects.\n\n# The best method to get the internal structure of an object is str():\n?str\nx = c(1,2,3)\ny = c(\"a\",\"b\",\"c\")\nstr(x)\nstr(y)\n\n#will print out all of your objects.\nobjects() \n#or\nls() \n\nrm(x) #This will remove any objects in your workspace.\nrm(list = ls()) #This will remove everything in your workspace.\n\n## Assigning variables:\n\n# HOW TO ASSIGN:\n\n#You can use = or the fancy (and time consuming) <-/-> for assigning varibles. This means that something IS SET as something else. For example:\n\nx = 1\nx\nx <- 2\nx\n3 -> x\nx\n\n# HOW TO EQUATE:\n\n#Using ==, you set up a LOGICAL that essentially asks the computer \"Is this true?\" For example:\n\nx = 3\n\nx == 3\n\n### The Class: Of course, there are different types of objects in R, and each object has a class.\n\nx = c(1,2,3)\ny = c(\"a\",\"b\",\"c\")\nclass(x)\nclass(y)\n\n# There are many kinds of classes, for example:\n# \"character\"\n# \"complex\"\n# \"double\"\n# \"expression\"\n# \"integer\"\n# \"list\"\n# \"logical\"\n# \"numeric\"\n# \"single\"\n# \"raw\"\n\n### Vector: simplest type of data structure, just an ordered collection of objects.\n#assigning a to a set of numbers with function c():\n?c\n\n#This fucntion enables you to combine values into a vector or list:\na = c(10,20,30,40,50) \na\n#assigning b to a set of numbers with function c()\nb =  c(2,3,6,8,10) \nb\n\n#You can also do basic math with vectors:\nc = 2*a + 3 - b\nc\n\n#Can also apply some simple mathmatical functions to vectors:\n# maximum:\nmax(c) \n\n# minimum:\nmin(c) \n\n# length of the vector in values:\nrange(c)\n\n#number of elements:\nlength(c) \n\n#sum all the elements:\nsum(c) \n\n#product of all the elements:\nprod(c) \n\n#gives you the average:\nmean(c) \n\n#gives you the median\nmedian(c) \n\n#sorts the data in increasing order ***more on sorting down below\nsort(c) \n\n# Generating sequences can also be an important part of working with R:\n#generates a sequence between 1 and 30:\n1:30 \n\n#gives you the same thing:\na = seq(1:30) \n\n#also gives you the same thing:\nseq(from=1, to=50) \n\n#can also tell it what the increment should be:\nseq(from=1, to=50, by=2) \n\n#gives you a sequence based on length.:\nseq(from=1, by=3, length=30) \n\nx = c(1,2,\"a\",\"b\")\n\n# You can also generate sequences with repeated objects:\n# repeating elements 1-5 over and over again.\nrep(a, times=4) \n\n# repeating elements in a row\nrep(a, each=6) \n\n# R is also great for working with logical data (TRUE and FALSE). They are created by conditions (<.<=,>,>=,==).\nd = a < 30\nd\n\n### Vectors with characters:\n# You can build vectors not only with numbers but strings or characters as well using the double or single \n# matched quotes. \n\na = c(\"this\",\"is\", \"a\", \"character\", \"vector\", \"!\")\na\n\n?paste\nb = paste(c(\"this\",\"a\", \"vector\"),c(\"is\",\"character\",\"!\"), sep=\" \")\nb\n\n#Vectors are \"atomic\" structures, meaning that they all have the same mode or type (numeric, complex,\n#logical, character, etc...). The only exception is NA. \nx = c(T, F, \"hello\", 2)\nstr(x)\n\ny = c(TRUE,F,F,T,T)\nstr(y)\n\nz = c(1,2,3,4,5)\nstr(z)\n\nw = c(1i,2,3,4,5)\nstr(w)\n\n###Other data structures:\n#Matrices or Arrays: multi-dimensional vectors.\n?matrix\nmatrix(c(1, 2, 3, 4, 5), nrow=3, ncol=5) \nmatrix(c(1, 2, 3, 4, 5), nrow=5, ncol=3) \n\n#Factors: this should be used for categorical data.\nfactor(1:20, labels = \"category_\")\n\n#Lists: vector where the data need not be the same mode (not atomic)\n?list\nx = list(1, \"two\", T, 3i)\nx\nstr(x)\n\n#Data frames: your basic table. One row per observational unit.\n?data.frame\nnew_df = as.data.frame(matrix(c(1, 2, 3, 4, 5), nrow=3, ncol=5))\n?as.data.frame\nView(new_df)\n\n##How would you create your own data frame of data:\n\n#Let's say that we want to make a table of left/right-handed individuals by gender:\n#We have 4 left-handed men, 6 left-handed women, 5 right-handed men, and 4 right-handed women:\n\n##The numbers fill out columns first and then the rows. \nnew_df = as.data.frame(matrix(c(4, 5, 6, 4), nrow=2, ncol=2))\nnames(new_df)[1] = \"male\"\nnames(new_df)[2] = \"female\"\nrownames(new_df)[1] = \"left\"\nrownames(new_df)[2] = \"right\"\nView(new_df)\n\n\n#Functions: they are objects as well and can be built and stored (but there are many useful prefab ones)\nmyMeanFunction <- function(set){\n  x = mean(set)\n  return(x)\n}\ng = c(1,2,3,4,5,10,50)\nmyMeanFunction(g)\nmean(g)\n\n##### Working with Missing Values #####\n\n#R is very good at dealing with missing values, but you need to know how to deal with them to use this to\n#your advantage.\n\nx = c(NA,2,3,NA,5)\nis.na(x)\n!is.na(x)\n\n#NAs will not generate an error in a vector and is automatically recognized as NA\n\n###Other NA actions:\n#takes out the NAs and tells you where they were\n?na.omit\nna.omit(x) \n#takes out the NAs and tells you where they were\nna.exclude(x) \n#prints all data, even NAs\nna.pass(x) \n#will not print out if data is missing.\nna.fail(x) \n\n#How that works with data frames:\nnew_df = as.data.frame(matrix( c(1, 2, 3, 4, 5), nrow=3, ncol=5))\nView(new_df)\nnew_df[1,1] = NA\nnew_df[3,5] = NA\nnew_df\nna.omit(new_df)\nna.exclude(new_df)\nna.pass(new_df)\nna.fail(new_df)\n\n\n#You can also exclude NAs when you're running functions\nx\n#removes nas for the function\nmean(x, na.rm=TRUE) \n#If you don't remove the NAs then it returns NA.\nmean(x)\n#summarizes, and shows how many NAs.\nsummary(x) \n#sorts data, putting your NAs at the end.\nsort(x,na.last = TRUE) \n\n##### A few other math functions before we get to working with data:\ny = c(-1.3,2,10.75)\ny\n# Absolute value:\nabs(y)\n\n# round up to the next highest integer.\nceiling(y)\n\n# round down the lowest integer.\nfloor(y)\n\n#round but specify the digits:\nround(y, digits=1)\n\n#Expand grid can create a data frame with all the given possibilities. \n?expand.grid\nexpand.grid(math=c(500,800), verbal=c(600, 700), gender=c(\"Male\", \"Female\"))\n\n#Selects a random sample.\n?sample\nsample(1:100, 1)\nsample(state.name, 10)\n\n############# SECTION 3. LOADING IN THE DATA ###############################\n\n#Yes, you can use R as a GIANT CALCULATOR. But that would be a waste. Let's finally play with some data, \n#shall we?\n\n#For this workshop, I've already created your project file, but next time you boot up R and you're starting\n#a new project, make sure that you select File > New Project. Save it in a directory.\n\n#Also, to create a new script (like the one you are reading), File > New > R Script.\n\n#You should document your code with this so you can re-run things if the base data changes. \n\n##### SETTING THE WORKING DIRECTORY #####\n\n#First things first, you have to set the working directory to tell your program where your main folder\n#is with all your data (csv, xls, dat, scripts, project files, etc...)\n\nsetwd(\"~/NICAR/Course_R\") #If you don't know the path, find the folder in the files pane. Then\n#go to dropdown Session > Set Working Directory > To Files Pane Location. This will also show you the path.\n\n#You can check your working directory if you think you're in the wrong place:\ngetwd()\n\n\n##### Reading data into R from a file #####\n\n##From a CSV (best file type to read in with R):\nrm(list = ls())\neducation_data_raw = read.csv(\"NICAR_education_data/NICAR_education_data_RAW.csv\", header = T, strip.white = T, sep=\",\")\nView(education_data_raw)\n\n##Other important arguments that you can add to it:\n#1. header - is there a header? T or F\n#2. sep = \",\" - what is separating the data; for csv, it's \",\"\n#3. quote = \"\\\"'\" - how do quotes appear in the strings (here it is single quote)\n#4. dec = \".\" - what does the decimal look like.\n#5. row.names = c(x,x,x,etc...) - you can set row names if you like.\n#6. col.names = c(x,x,x,etc...) - you can reset the column names. \n#7. stringsAsFactors = TRUE or FALSE - you can set the strings to character mode instead of factor (default is factor)\n#8. na.strings = \"NA\" - what does NA look like.\n#9. colClasses = c(x,x,x,etc) - set the type of data in each column.\n#10. nrows = 100 - sets the number of rows.\n#11. skip = 10 - sets how many rows you want to skip at the beginning.\n#12. fill = TRUE or FALSE - if rows have different number of columns, this will fill the rest with blanks.\n#13. strip.white = TRUE or FALSE - strip the white spaces from the columns\n\n\n##From a tab delim. file:\ndelim_table = read.delim(filename, header=TRUE, sep=\"\\t\") #this is just an example.\n\n##From an XLS:\n##require(\"xlsx\")\n##ceos_raw_from_xlsx = read.xlsx(\"top_100_ceos.xlsx\", 1, header=TRUE) #read first sheet from this xlsx\n##View(ceos_raw_from_xlsx)\n\n##From a DAT file:\n?read.table() #works with many file formats\n\n##Read Fixed Width Formatted Files:\n?read.fwf()\n\n### For more on importing files, check out: http://cran.r-project.org/doc/manuals/r-release/R-data.html\n\n############# SECTION 4. BASIC DATA CLEANING #############\n\n#Once you have your data loaded in, check that it has the number of variables \n#and observations that you expect.\n\n#And then you can start reviewing the various columns.\n#this will show the first 1000 rows of a data frame:\nView(education_data_raw)\nhead(education_data_raw,2)\nhead(education_data_raw,5)\ntail(education_data_raw,2)\n\n#look at the headers:\nnames(education_data_raw)\n\n#number of variables:\nlength(education_data_raw) \n\n#Next, take a look at the structure of the data frame.\nstr(education_data_raw) \n\n#School name has a strange column name (with the ...) so lets change it.\nnames(education_data_raw)[3] = \"SCHOOL_NAME\"\nnames(education_data_raw)\n\n#Check out only a column of the data with \"$\"\neducation_data_raw$SCHOOL_NAME\n\n##Check out only a column of the data with the column number\neducation_data_raw[3]\n\n##Check out only a column of the data with the column number\neducation_data_raw[,3]\n\n##Check out only a row of the data with the row number\neducation_data_raw[3,]\n\n##Check out Amridge University percent pell students.\neducation_data_raw[3,7]\n\n#It appears that aside from ID, UNITID, CONTROl, PREDDEG , everything was read in as a factor. \n#We're going to have to change the column type to match the data. \n\n#Certain things should remain factors (anything we want to be categorical, like gender or state or industry).\n#This will make it easier to analyze later. \n\n##First let's rename the data we're working with:\n\neducation_data_clean = education_data_raw\n\n#Let's change a few variables to numeric or character (this will force anything that is not numeric to NA!):\neducation_data_clean$SCHOOL_NAME = as.character(education_data_clean$SCHOOL_NAME)\neducation_data_clean$UGDS = as.numeric(education_data_clean$UGDS)\neducation_data_clean$PCTPELL = as.numeric(education_data_clean$PCTPELL)\neducation_data_clean$CDR3 = as.numeric(education_data_clean$CDR3)\n\n#Take a look at the structure:\nstr(education_data_clean$PCTPELL)\n\n##Why didn't that work? Well, that's the issue with factors, it stores the observations differently than you might expect. \n\n##Let's try again. First, let's remake the data:\neducation_data_clean = education_data_raw\n\n#Try converting again:\neducation_data_clean$SCHOOL_NAME = as.character(education_data_clean$SCHOOL_NAME)\neducation_data_clean$UGDS = as.numeric(as.character(education_data_clean$UGDS))\neducation_data_clean$PCTPELL = as.numeric(as.character(education_data_clean$PCTPELL))\neducation_data_clean$CDR3 = as.numeric(as.character(education_data_clean$CDR3))\n\n#Take a look at the strutcure\nstr(education_data_clean$PCTPELL)\nsummary(education_data_clean$PCTPELL)\nsummary(education_data_clean)\n\n#Find and replace text:\n?gsub\nhead(summary(education_data_clean$GRAD_DEBT_MDN),5)\n\n##Let's take out the privacy suppression and name it something else, or make it NA:\n#First convert this to character:\neducation_data_clean$GRAD_DEBT_MDN = as.character(education_data_clean$GRAD_DEBT_MDN)\n\n#Then replace the privacysuppressed with unknown:\neducation_data_clean$GRAD_DEBT_MDN = gsub(\"PrivacySuppressed\", \"Unknown\",education_data_clean$GRAD_DEBT_MDN)\n\n#Take a look at what comes out:\nsummary(education_data_clean$GRAD_DEBT_MDN)\neducation_data_clean$GRAD_DEBT_MDN = as.numeric(education_data_clean$GRAD_DEBT_MDN)\nmean(education_data_clean$GRAD_DEBT_MDN, na.rm = TRUE)\n\n##How to convert multiple columns at the same time:\nnames(education_data_clean)\nstr(education_data_clean)\ncols.num <- c(6:41)\neducation_data_clean[cols.num] <- sapply(education_data_clean[cols.num],as.character)\nstr(education_data_clean)\neducation_data_clean[cols.num] <- sapply(education_data_clean[cols.num],as.numeric)\nwarnings()\nstr(education_data_clean)\ncols.num <- c(4:5)\neducation_data_clean[cols.num] <- sapply(education_data_clean[cols.num],as.character)\nsummary(education_data_clean$CONTROL)\nstr(education_data_clean)\n\n##### Some other great functions for cleaning data #####\n\n#Substring: Extract or replace substrings in a character vector.\n?substr\nd = c(\"All your base  are belong to us.\")\nd\ne = substr(d, 1,10)\ne\n\n#Searching for a pattern.\n?grep\ngrep(\"base\", d, ignore.case = TRUE)\ngrepl(\"base\", d, ignore.case = TRUE)\n\n#Find and replace:\n?sub\nsub(\"base\",\"cats\",d)\n\n#Find and replace (global):\n?gsub\ngsub(\"base\", \"dogs\",d)\n\n#String split:\nstrsplit(d, \"  \")\n\n#Make upper case:\ntoupper(d)\n\n#Make lower case:\ntolower(d)\n\n#Adding on another column:\n?cbind\n\n#Adding on rows:\n?rbind\n\n#Merging data frames by a common column (often known as join):\n?merge\n\n#####Some other ways to sort/summarize data:\n##Look at a summary of all the variables:\nsummary(education_data_clean)\nsummary(as.factor(education_data_clean$CONTROL))\n\n## SUMMARY will give you an overall breakdown of your data. \n\n## For values that are characters, you will just see the number of observations.\n\n## For numbers, you will see the minimum, the 1st quartile, the median, the mean, the 3rd quartile, and the max. \n## This is incredibly helpful for understanding the distribution. \n\n##### Sorting your data will help you understand it better. #####\n\n## Sorting by one variable:\nsorted_data_schools = education_data_clean[order(education_data_clean$SCHOOL_NAME),] \nhead(sorted_data_schools)\n\nsorted_data_control = education_data_clean[order(education_data_clean$CONTROL),]\nhead(sorted_data_control)\n\n##The latest versions of R also have sorting in the data frame itself.\n\n\n##### PLYR/DPLYR: incredibly powerful tools from the R legend, Hadley Wickham. \ninstall.packages(\"plyr\")\nrequire(\"plyr\")\ninstall.packages(\"dplyr\")\nrequire(\"dplyr\")\n\n#Read the documentation: https://cran.r-project.org/web/packages/dplyr/dplyr.pdf\n#Even better, read the CHEAT SHEET: https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf\n\n#a) How to join with DPLYR:\n\n#First let's create some subsets so that we can join them back together:\neducation_data_1 = education_data_clean[1:10,2:3]\neducation_data_2 = education_data_clean[1:10,c(2,7)]\neducation_data_1\neducation_data_2\n\n#Then you can left_join, right_join, inner_join, etc...\neducation_data_JOINED = left_join(education_data_1,education_data_2,by=\"UNITID\")\neducation_data_JOINED\n\n?bind_rows\n?bind_cols\n\n#b) How to filter with DPLYR:\n\n##You can filter for non-profit private schools that predominantly offer bachelors and that have a percentage of pell students less than 20 percent:\nhead(filter(education_data_clean, CONTROL == 2,  PCTPELL < .2, PREDDEG == 3))\nhead(filter(education_data_clean, CONTROL == 2 | CONTROL == 1,  PCTPELL < .2, PREDDEG == 3 ))\n\n##You can also slice a bit of your data based on rows:\nslice(education_data_clean, 1000:1003)\n\n##You can arrange data which is like filter except it changes the order:\nhead(arrange(education_data_clean, UGDS))\nhead(arrange(education_data_clean, desc(UGDS)))\n\n##Selecting columns:\nnames(education_data_clean)\nhead(select(education_data_clean, UNITID, SCHOOL_NAME, ADM_RATE))\nhead(select(education_data_clean, UNITID, SCHOOL_NAME:ADM_RATE))\nhead(select(education_data_clean, UNITID:COSTT4_A, -(UGDS:ADM_RATE)))\n\n##Distinct variables:\nnrow(distinct(select(education_data_clean, SCHOOL_NAME)))\nnrow(education_data_clean)\n\n##Create new columns with mutate:\n\n#Create a debt to cost over 4 years:\nhead(mutate(education_data_clean,\n       debt_cost_ratio = GRAD_DEBT_MDN/(4*COSTT4_A)))\n\n#Create a debt to earnings ratio:\nhead(mutate(education_data_clean,\n            debt_earnings_ratio = GRAD_DEBT_MDN10YR/(md_earn_wne_p10/12)))\n\n##Let's save this one to work with later:\neducation_data_clean = mutate(education_data_clean,\n                              debt_earnings_ratio = GRAD_DEBT_MDN10YR/(md_earn_wne_p10/12))\n\nView(education_data_clean)\n##Group data by category:\n#First group by type of school (1 - public school, 2 - nonprofit private school, 3 - for-profit school)\nby_control <- group_by(education_data_clean, CONTROL)\n\nschool_type <- summarise(by_control,\n                    count = n(),\n                   mean_debt = mean(GRAD_DEBT_MDN, na.rm = TRUE),\n                   mean_cost = mean(na.omit(COSTT4_A)))\nschool_type\n\n#First group by type of school (1 - public school, 2 - nonprofit private school, 3 - for-profit school) and then the preddeg (0 - unclassified, 1 - certificate program,\n# 2 - associates degrees, 3 - bachelor's degree, 4-graduate degree):\nby_control <- group_by(education_data_clean, CONTROL, PREDDEG)\n\nschool_type <- summarise(by_control,\n                         count = n(),\n                         mean_debt = mean(GRAD_DEBT_MDN, na.rm = TRUE),\n                         mean_cost = mean(na.omit(COSTT4_A)))\nschool_type\n\n## Data cleaning with R is an art, but it's not hard to get pretty decent at it. I highly suggest\n## taking a look at this short guide: \n## http://cran.r-project.org/doc/contrib/de_Jonge+van_der_Loo-Introduction_to_data_cleaning_with_R.pdf\n\n\n################# VISUALIZING YOUR DATA:\n\ninstall.packages(\"ggplot2\")\nlibrary(\"ggplot2\")\n\n##A great resource: http://www.noamross.net/blog/2012/10/5/ggplot-introduction.html \n\n\n### Histograms with GGPLOT:\n\n##Looking at the frequency of pctpell:\nggplot(education_data_clean, aes(x=PCTPELL)) + geom_histogram(binwidth=.05,col=I(\"black\"))\n\n##Looking at the frequency of percentage of students with loans:\nggplot(education_data_clean, aes(x=PCTFLOAN)) + geom_histogram(binwidth=.05,col=I(\"black\"))\n\n##Looking at a histogram of completion rates:\nggplot(education_data_clean, aes(x=C150_4)) + geom_histogram(binwidth=.05,col=I(\"black\"))\n\n### DENSITY CHARTS (kind of like a probability curve):\n##Breaking down schools by public/nonprofit private/for-profit private AND pctpell:\nggplot(education_data_clean, aes(PCTPELL, colour = CONTROL, fill = CONTROL)) +\n  geom_density(alpha = 0.3) \n\n##Breaking down schools by what is the predominant degree:\nggplot(education_data_clean, aes(PCTPELL, colour = PREDDEG, fill = PREDDEG)) +\n  geom_density(alpha = 0.3) \n\n\n#### BARPLOTS:\n\n#Count of schools that are public/nonprofit/for-profit:\nggplot(education_data_clean, aes(x = factor(CONTROL))) + geom_bar(stat = \"bin\")\n\n##Average percentage of pell students by type of school:\nggplot(education_data_clean,aes(x=factor(CONTROL), y=PCTPELL)) + stat_summary(fun.y=mean, geom=\"bar\") + ylim(0,1)\n\n##Looking at debt broken down by type of school and degree:\nplot1<-ggplot(education_data_clean,aes(x=factor(CONTROL),y=GRAD_DEBT_MDN,fill=factor(PREDDEG)), color=factor(PREDDEG)) +  \n  stat_summary(fun.y=mean,position=position_dodge(),geom=\"bar\") \nplot1\n\n#### SCATTERPLOTS:\n\n##Looking at cost by percent pell:\np1 <- ggplot(education_data_clean, aes(x = COSTT4_A, y = PCTPELL))\np1 + geom_point(color=\"blue\") \n\n##Looking at cost by percent pell but breaking it down by the type of school:\np1+ geom_point(aes(color = CONTROL))  \n\n##Looking at cost by percent pell but breaking it down by the type of school and the size of the school:\np1+ geom_point(aes(color = CONTROL, size = UGDS))  \n\n##Adding a regression line:\np1 + geom_point(color=\"blue\") +geom_smooth(method = \"lm\", se = TRUE) \n\n##Adding multiple regression lines:\np1 + geom_point(aes(color = CONTROL)) + geom_smooth(aes(color=factor(CONTROL)),method = \"lm\", se = TRUE) \n\n\n############# SECTION 6. REMINDERS FOR WHEN YOU GET STUCK############# \n\n# 1. R is case sensitive: If a package or variable has a name, the case matters!\n\n# 2. Errors are common so get used to using help and ? as well as the online communities \n# so you can figure out what you want.\n\n# 3. Commands can be separated by a newline or a semi-colon (‘;’)\n##EX: \nx = 3+4 ; y = x*2 ; y\n\n# 4. Comments can be made with hashtags(#) and these lines will not run in your console.\n\n# 5. If you don't finish a command in the console, you will see a plus-sign (+) until you finish it!\n##EX:\nx = (1 +3) - (2*4\n)\n\n# 6. You must install packages before you use them. Once they are installed, you have to require or \n#load them.\n##EX:\ninstall.packages(\"ggplot2\")\nrequire(\"ggplot2\")\n\n# 7. To run code from the scripts, hold down command and hit return. For multiple lines, select all\n#the lines, hold command and hit return.\n\n# 8. R has some built in data sets that you can play with to get better (see package \"datasets\") and for a\n# complete list > library(help = datasets)\n\n# 9. When you get stuck and something is not working how you expect it to work, take a look at the types \n#of data you are trying to work with (use summary and str). These can be great diagnostic tools at \n#the beginning because not all functions work with all types of data.\n\n# 10. SAVE ALL YOUR WORK. Obviously.\n\n# 11. Get stuck? Refresh R! \n.rs.restartR()\n\n############# SECTION 7. HOW TO GET HELP ############# \n\n# The main R site: http://cran.r-project.org/\n# This has everything from guides to R updates. It also has a comprehensive list of packages and lots\n# of great tips on how to use R. \n\n# Official R Language Definition: http://cran.r-project.org/doc/manuals/r-release/R-lang.html\n\n# An In-Depth Introduction to R: http://cran.r-project.org/doc/contrib/usingR.pdf\n\n# Using R for Intro Stats: http://cran.r-project.org/doc/contrib/Verzani-SimpleR.pdf\n\n# Quick R: http://www.statmethods.net/\n\n# R Documentation Search: http://www.rdocumentation.org/\n\n# R-bloggers: find out awesome things people are doing with R http://www.r-bloggers.com/\n\n# Coursera Course on R: https://www.coursera.org/course/rprog\n\n# Princeton Guide to R: http://libguides.princeton.edu/dss/R\n\n# UCLA Guide to R: http://www.ats.ucla.edu/stat/r/sk/books_usingr.htm\n\n# Stack overflow: http://stackoverflow.com/\n\n# Annie's Tipsheet: https://goo.gl/0i0j3X\n\n\n\n\n\n##################################### GOOD LUCK AND LOVE R ############################################\n\n\n",
    "created" : 1457731612111.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4130648418",
    "id" : "A9123DC0",
    "lastKnownWriteTime" : 1457734310,
    "path" : "~/Dropbox/NICAR - R - 2016/Course_R/NICAR_workshop_script.r",
    "project_path" : "NICAR_workshop_script.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}