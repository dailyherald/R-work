library(ggmap)
library(ggthemes)
theme_map <- function(...) {
theme_fivethirtyeight() +
theme(
plot.background = element_rect(fill = "white"),
plot.title = element_text(size = 24),
plot.subtitle = element_text(size = 16),
plot.caption=element_text(size=12, hjust=0),
legend.position="right",
legend.direction="vertical",
legend.background = element_rect(fill = "white"),
legend.title=element_text(size=10, face="bold"),
legend.text=element_text(size=10),
legend.text.align = 0, # 0 = left, 1 = right
axis.text.x=element_blank(),
axis.text.y=element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
...
)
}
ill_f <- read.csv("ill_f.csv", stringsAsFactors = FALSE)
head(ill_f)
summary(ill_f)
library(readr)
library(rgdal)
library(dplyr)
library(ggplot2)
library(ggmap)
library(ggthemes)
ill <- readOGR(dsn = "ILcounties/ILcounties.shp")
head(ill@data, n = 10)
summary(ill@data)
ill@proj4string
plot(ill)
census16 <- read.csv("census2016_all.csv", stringsAsFactors = FALSE)
head(census16)
summary(census16)
ill$NAMELSAD10 %in% census16$Place
ill@data <- left_join(ill@data, census16, by = c('NAMELSAD10' = 'Place'))
head(ill@data)
summary(ill@data)
names(ill)
write_csv(ill@data,"illdata.csv")
census16 <- read.csv("illdata.csv", stringsAsFactors = FALSE)
head(census16)
census16$STATEFP10=NULL
census16$COUNTYFP10=NULL
census16$COUNTYNS10=NULL
head(census16)
ill_f <- fortify(ill, region="GEOID10")
head(ill_f, n = 5)
ill_f$id <- as.numeric(as.character(ill_f$id))
class(ill_f$id)
class(census16$GEOID10)
ill_f <- left_join(ill_f, census16, by = c('id' = 'GEOID10'))
head(ill_f, n=5)
names(ill_f)
summary(ill_f$rate_16under19)
quantile(ill_f$rate_16under19, probs = seq(0, 1, .25))
write_csv(ill_f,"ill_f.csv")
ill_f <- read.csv("ill_f.csv", stringsAsFactors = FALSE)
head(ill_f)
summary(ill_f)
names(ill_f)
summary(ill_f$chg_total)
quantile(ill_f$chg_total, probs = seq(0, 1, .2))
map <- ggplot(ill_f,
aes(long, lat, group = group, fill = chg_total)
) +
geom_polygon( color = "black", size = 0.25) + coord_map() + theme_map()
map <- map + labs(
title="title", # your headline
subtitle="subtitle",
caption="\nSource: Census.gov",
fill = "legend\ntitle")
map <- map + scale_fill_distiller(palette = "Blues",
direction = 1,
breaks = pretty_breaks(n=7)
)
map
map <- map + scale_fill_gradient2(low="#a6611a",
mid="#ffffcc",
high="#018571",
midpoint=0,
limits=c(-21.2,8.2),
breaks = pretty_breaks(n=7)
)
map
map <- map + scale_fill_viridis(option = "B",# A, B, C or D
direction=1,
breaks = pretty_breaks(n=7)
)
map
library(readr)
library(rgdal)
library(dplyr)
library(RColorBrewer) # for my color ramp
library(viridis)
library(scales)
library(ggplot2)
library(ggmap)
library(ggthemes)
theme_map <- function(...) {
theme_fivethirtyeight() +
theme(
plot.background = element_rect(fill = "white"),
plot.title = element_text(size = 24),
plot.subtitle = element_text(size = 16),
plot.caption=element_text(size=12, hjust=0),
legend.position="right",
legend.direction="vertical",
legend.background = element_rect(fill = "white"),
legend.title=element_text(size=10, face="bold"),
legend.text=element_text(size=10),
legend.text.align = 0, # 0 = left, 1 = right
axis.text.x=element_blank(),
axis.text.y=element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
...
)
}
ill_f <- read.csv("ill_f.csv", stringsAsFactors = FALSE)
head(ill_f)
summary(ill_f)
names(ill_f)
summary(ill_f$Rchg_65over)
quantile(ill_f$Rchg_65over, probs = seq(0, 1, .2))
no_classes <- 5
labels <- c()
quantiles <- quantile(ill_f$Rchg_65over, # data you wish to work with
probs = seq(0, 1, length.out = no_classes + 1))
labels <- c()
for(idx in 1:length(quantiles)){
labels <- c(labels, paste0(round(quantiles[idx], 2),
" to ",
round(quantiles[idx + 1], 2)))
}
labels <- labels[1:length(labels)-1]
ill_f$Rchg_65over_quantiles <- cut(ill_f$Rchg_65over,
breaks = quantiles,
labels = labels,
include.lowest = T)
map <- ggplot(ill_f,
aes(long, lat, group = group, fill = Rchg_65over_quantiles)
) +
geom_polygon( color = "white", size = 0.15) + coord_map() + theme_map() +
guides(fill = guide_legend(reverse = TRUE))
map <- map + labs(
title="65 and over", # your headline
subtitle="Percent change in the rate\nper 1,000 of persons aged 65\nand over, 2010 - 2016",
caption="\nSource: Census.gov",
fill = "PERCENT\nCHANGE")
map <- map + scale_fill_brewer(type = "div",
palette = "BrBG",
direction = 1
)
map
dev.off()
map <- ggplot(ill_f,
aes(long, lat, group = group, fill = Rchg_65over_quantiles)
) +
geom_polygon( color = "white", size = 0.15) + coord_map() + theme_map()
map <- map + labs(
title="65 and over", # your headline
subtitle="Percent change in the rate\nper 1,000 of persons aged 65\nand over, 2010 - 2016",
caption="\nSource: Census.gov",
fill = "PERCENT\nCHANGE")
map <- map + scale_fill_manual(
values = c("#a6611a", "#dfc27d", "#f6e8c3", "#80cdc1", "#018571")
) +
guides(fill = guide_legend(reverse = TRUE))
map
dev.off()
labels2 <- c()
for(idx in 1:length(quantiles)){
labels2 <- c(labels2, paste0(round(quantiles[idx], 1),
" -\n",
round(quantiles[idx + 1], 1),
"%"
))
}
labels2 <- labels2[1:length(labels2)-1]
ill_f$Rchg_65over_brks <- cut(ill_f$Rchg_65over,
breaks = quantiles,
include.lowest = TRUE,
labels = labels2)
brks_scale <- levels(ill_f$Rchg_65over_brks)
labels_scale <-brks_scale
labels_scale
map <- ggplot(ill_f,
aes(long, lat, group = group, fill = Rchg_65over_quantiles)
) +
geom_polygon( color = "white", size = 0.15) + coord_map() + theme_map()
map <- map + labs(
title="65 and over", # your headline
subtitle="Percent change in the rate\nper 1,000 of persons aged 65\nand over, 2010 - 2016",
caption="\nSource: Census.gov",
fill = "PERCENT CHANGE")
map <- map +
theme(legend.position = "top", legend.direction = "horizontal") +
scale_fill_manual(
values = c("#a6611a", "#dfc27d", "#f6e8c3", "#80cdc1", "#018571"),
drop = FALSE,
labels = labels_scale,
guide = guide_legend(
direction = "horizontal",
keyheight = unit(2, units = "mm"),
keywidth = unit(75 / length(labels), units = "mm"),
title.position = 'top',
# I shift the labels around, the should be placed
# exactly at the right end of each legend key
title.hjust = 0.5,
#label.hjust = 1,
nrow = 1,
byrow = T,
# Can reverse the legend if that's clearer
reverse = F,
label.position = "bottom"
)
)
map
dev.off()
map <- ggplot(ill_f,
aes(long, lat, group = group, fill = Rchg_65over_quantiles)
) +
geom_polygon( color = "white", size = 0.15) + coord_map() + theme_map()
map <- map + labs(
title="65 and over", # your headline
subtitle="Percent change in the rate\nper 1,000 of persons aged 65\nand over, 2010 - 2016",
caption="\nSource: Census.gov",
fill = "PERCENT\nCHANGE")
map <- map + theme(legend.position = "right") +
scale_fill_viridis(option = "B",# A, B, C or D
direction=1,
discrete = T,
#breaks = pretty_breaks(n=7),
guide = guide_legend(
keyheight = unit(5, units = "mm"),
title.position = 'top',
reverse = T
)
)
map
map <- map + theme(legend.position = "right") +
scale_fill_viridis(option = "B",# A, B, C or D
direction=1,
discrete = T,
#breaks = pretty_breaks(n=7),
guide = guide_legend(
keyheight = unit(5, units = "mm"),
title.position = 'top',
reverse = F
)
)
map
map <- map + theme(legend.position = "right") +
scale_fill_viridis(option = "B",# A, B, C or D
direction=1,
discrete = T,
#breaks = pretty_breaks(n=7),
guide = guide_legend(
keyheight = unit(5, units = "mm"),
title.position = 'top',
reverse = T
)
)
map
dev.off()
map <- ggplot(ill_f,
aes(long, lat, group = group, fill = Rchg_65over_quantiles)
) +
geom_polygon( color = "white", size = 0.15) + coord_map() + theme_map()
map <- map + labs(
title="65 and over", # your headline
subtitle="Percent change in the rate\nper 1,000 of persons aged 65\nand over, 2010 - 2016",
caption="\nSource: Census.gov",
fill = "PERCENT CHANGE")
map <- map +
theme(legend.position = "top", legend.direction = "horizontal") +
scale_fill_manual(
# viridis, magma, plasma or inferno
# (#) = number of breaks, [4:8] takes last 5
values = magma(8)[3:7],
drop = FALSE,
labels = labels_scale,
guide = guide_legend(
direction = "horizontal",
keyheight = unit(2, units = "mm"),
keywidth = unit(75 / length(labels), units = "mm"),
title.position = 'top',
# I shift the labels around, the should be placed
# exactly at the right end of each legend key
title.hjust = 0.5,
#label.hjust = 1,
nrow = 1,
byrow = T,
# Can reverse the legend if that's clearer
reverse = F,
label.position = "bottom"
)
)
map
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
summary(df)
dotchart(df$Total_RTR_incidents,labels=df$Year_Quarter,cex=1,
main="RTR incidents by year, quarter",
xlab="RTR incidents")
x <- df[order(df$Year_Quarter),] # sort and place into new dataframe x
x$years <- factor(x$years) # it must be class of factor
x$color[x$years==2014] <- "red" # assign red to 2014 rows
x$color[x$years==2015] <- "blue" # assign blue to 2015 rows
x$color[x$years==2016] <- "darkgreen" # assign etc
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
summary(df)
dotchart(df$Total_RTR_incidents,labels=df$Year_Quarter,cex=1,
main="RTR incidents by year, quarter",
xlab="RTR incidents")
dotchart(df$Total_RTR,labels=df$Year_Quarter,cex=1,
main="RTR incidents by year, quarter",
xlab="RTR incidents")
x <- df[order(df$Year_Quarter),] # sort and place into new dataframe x
x$years <- factor(x$year) # it must be class of factor
x$color[x$years==2014] <- "red" # assign red to 2014 rows
x$color[x$years==2015] <- "blue" # assign blue to 2015 rows
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
summary(df)
dotchart(df$Total_RTR,labels=df$Year_Quarter,cex=1,
main="RTR incidents by year, quarter",
xlab="RTR incidents")
x <- df[order(df$Year_Quarter),] # sort and place into new dataframe x
x$years <- factor(x$year) # it must be class of factor
x$color[x$year==2014] <- "red" # assign red to 2014 rows
x$color[x$year==2015] <- "blue" # assign blue to 2015 rows
x$year <- factor(x$year) # it must be class of factor
x$color[x$year==2014] <- "red" # assign red to 2014 rows
x$color[x$year==2015] <- "blue" # assign blue to 2015 rows
x$color[x$year==2016] <- "darkgreen" # assign etc
dotchart(x$Total_RTR,labels=x$Year_Quarter,cex=.7,groups= x$year,
main="RTR incidents\ngrouped by year",
xlab="RTR incidents", gcolor="Orange", color=x$color)
dotchart(df$Total_RTR,labels=df$Year_Quarter,cex=1,
main="RTR incidents by year, quarter",
xlab="RTR incidents")
x <- df[order(df$Year_Quarter),] # sort and place into new dataframe x
x$year <- factor(x$year) # it must be class of factor
x$color[x$year==2014] <- "red" # assign red to 2014 rows
x$color[x$year==2015] <- "blue" # assign blue to 2015 rows
x <- df[order(df$Year_Quarter),] # sort and place into new dataframe x
x$year <- factor(x$year) # it must be class of factor
x$color[x$year==2014] <- "red" # assign red to 2014 rows
x$color[x$year==2015] <- "blue" # assign blue to 2015 rows
x$color[x$year==2016] <- "darkgreen" # assign etc
dotchart(x$Total_RTR,labels=x$Year_Quarter,cex=1.7,groups= x$year,
main="RTR incidents\ngrouped by year",
xlab="RTR incidents", gcolor="Orange", color=x$color)
dotchart(x$Total_RTR,labels=x$Year_Quarter,cex=.7,groups= x$year,
main="RTR incidents\ngrouped by year",
xlab="RTR incidents", gcolor="Orange", color=x$color)
dotchart(x$Total_RTR,labels=x$Year_Quarter,cex=.9,groups= x$year,
main="RTR incidents\ngrouped by year",
xlab="RTR incidents", gcolor="Orange", color=x$color)
dotchart(df$Total_RTR,labels=df$Year_Quarter,#cex=1,
main="RTR incidents by year, quarter",
xlab="RTR incidents")
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
?par
par(las=1) # make label text always horizontal.
par(mar=c(5,5,2,2)) # mar is in lines, mai in inches
par(pin=c(4,2.75)) # size of plot in inches
barplot(df$Total_RTR, horiz=TRUE,
names.arg = df$Year_Quarter, cex.names=0.8,
main="RTR incidents by year, quarter",
xlab = "Number of incidents",
col="blue")
counts2 <- matrix(c(df$SOF_only,df$UOF_only,df$Transitions),ncol=3)
counts2
colnames(counts2)=c("SOF_only","UOF_only","Transitions")
rownames(counts2)=df$Year_Quarter
counts2
counts <- t(counts2)
counts
barplot(counts, horiz=TRUE, cex.names=0.8,
main="RTR incidents by year, quarter",
xlab = "Number of incidents",
col=c("darkgreen","darkblue","red"),
legend = rownames(counts),
args.legend = list(x ='bottomright', inset=0.01)
)
barplot(counts, horiz=TRUE, cex.names=0.8,
main="RTR incidents by year, quarter",
xlab = "Number of incidents",
col=c("green","blue","red"),
legend = rownames(counts),
args.legend = list(x ='bottomright', inset=0.01)
)
barplot(counts, horiz=TRUE, cex.names=0.8,
beside=TRUE,
main="RTR incidents by year, quarter",
xlab = "Number of incidents",
col=c("green","blue","red"),
legend = rownames(counts),
args.legend = list(x ='bottomright', inset=0.01)
)
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
summary(df)
plot(df$Total_RTR, type="b",
xlab = "Year, Quarter",
ylab = "Incidents",
main = "Total RTR incidents")
xrange <- range(1,NROW(df$Year_Quarter))
xrange
yrange <- range(0,df$SOF_only,df$UOF_only,df$Transitions)
yrange
plot(xrange, yrange, type="n", axes=FALSE,
xlab = "Year, Quarter", ylab = "Incidents",
main = "Total RTR incidents")
lines(df$SOF_only, type = "b", pch=19, col = "orange", lwd=2)
lines(df$UOF_only, type = "b", pch=19, col = "blue", lwd=2)
lines(df$Transitions, type = "b", pch=19, col = "darkgreen", lwd=2)
axis(1, las=1, at=1:xrange[2],
tck = .05, # set the ticks to be inside plot
# Since we're creating custom labels, we need 12 of them
# so "" at 1, then 2014 2Q and etc
# notice we can split the lines with \n
# and the x label adjusts down to accomodate
lab=c("","2014\n2Q","","2014\n4Q","","2015\n2Q","","2015\n4Q","","2016\n2Q","","2016\n4Q") )
axis(2, las=1, at=5*0:yrange[2], tck = 1, lty=3)
legend(1, yrange[2],
c("SOF Only","UOF only", "Transition"),
cex=0.8,
col=c("Orange","blue","darkgreen"),
pch=19, lwd=2)
library(readr)
df <- read_csv("dfCrime.csv")
summary(df)
with(df, plot(Total_RTR, UOF_only)) # scatter plot
title(main = "UOF vs Total RTR incidents") # adds title
abline(h=median(df$UOF_only), lty=2, lwd=2)
abline(v=median(df$Total_RTR), lwd=2, col="red")
fit <- lm(df$UOF_only~df$Total_RTR)
summary(fit)
abline(fit)
par(mfrow=c(3,1),mar=c(4,4,2,1))
with(df, plot(Total_RTR, UOF_only)) # scatter plot
title(main = "UOF vs Total RTR incidents") # adds title
abline(h=median(df$UOF_only), lty=2, lwd=2)
abline(v=median(df$Total_RTR), lwd=2, col="red")
abline(lm(df$UOF_only~df$Total_RTR))
with(df, plot(Total_RTR, SOF_only)) # scatter plot
title(main = "SOF vs Total RTR incidents") # adds title
abline(h=median(df$SOF_only), lty=2, lwd=2)
abline(v=median(df$Total_RTR), lwd=2, col="red")
abline(lm(df$SOF_only~df$Total_RTR))
with(df, plot(Total_RTR, Transitions)) # scatter plot
title(main = "Transitions vs Total RTR incidents") # adds title
abline(h=median(df$Transitions), lty=2, lwd=2)
abline(v=median(df$Total_RTR), lwd=2, col="red")
abline(lm(df$Transitions~df$Total_RTR))
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
summary(df)
plot(df$Total_RTR, df$UOF_only,
main = "UOF vs Total RTR incidents",
# sub = "Daily Herald graphic",
xlab="Total response to resistance incidents",
ylab="Use of force incidents only")
y2014 <- subset(df, year==2014)
points(y2014$Total_RTR,y2014$UOF_only,col="red",pch=19)
dev.off()
library(readr)
df <- read_csv("dfCrime.csv")
names(df)
summary(df)
plot(df$Total_RTR, df$UOF_only,
main = "UOF vs Total RTR incidents",
# sub = "Daily Herald graphic",
xlab="Total response to resistance incidents",
ylab="Use of force incidents only")
y2014 <- subset(df, year==2014)
points(y2014$Total_RTR,y2014$UOF_only,col="red",pch=19)
y2015 <- subset(df, year==2015)
points(y2015$Total_RTR,y2015$UOF_only,col="blue",pch=19)
y2016 <- subset(df, year==2016)
points(y2016$Total_RTR,y2016$UOF_only,col="green",pch=19)
legend("topleft", pch = c(19,19,19), col = c("red","blue","green"), legend = c("2014", "2015", "2016"))
abline(lm(df$UOF_only~df$Total_RTR))
summary(df)
plot(df$Total_RTR, df$UOF_only,
main = "Response to resistance incidents",
xlab="Total response to resistance incidents",
ylab="Response by type",
xlim=c(20,60), ylim=c(0,40),col="red",pch=19)
points(df$Total_RTR,df$SOF_only,col="blue",pch=19)
points(df$Total_RTR,df$Transitions,col="green",pch=19)
legend("topleft", pch = c(19,19,19), col = c("red","blue","green"), legend = c("UOF", "SOF", "Transitions"))
abline(lm(df$UOF_only~df$Total_RTR, par(col="red")))
abline(lm(df$SOF_only~df$Total_RTR, par(col="blue")))
abline(lm(df$Transitions~df$Total_RTR, par(col="green")))
